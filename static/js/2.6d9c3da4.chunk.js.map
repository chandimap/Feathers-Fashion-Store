{"version":3,"sources":["containers/Auth/Auth.js"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","e","controlName","updatedControls","Object","C_Users_CHANDIMA_Desktop_GITHUB_react_simple_online_shop_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_this","C_Users_CHANDIMA_Desktop_GITHUB_react_simple_online_shop_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","_this2","this","_this$props","loading","error","isAuth","_this$state","formElementsArray","key","push","id","config","form","map","formElement","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_13__","invalid","shouldValidate","changed","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_15__","errorMessage","message","authRedirect","react_router_dom__WEBPACK_IMPORTED_MODULE_11__","to","title","className","Fragment","_shared_ScrollToTopOnMount__WEBPACK_IMPORTED_MODULE_16__","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_14__","clicked","btnType","onSubmit","Component","connect","auth","token","dispatch","actions"],"mappings":"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","file":"static/js/2.6d9c3da4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Auth.scss';\r\nimport * as actions from '../../store/actions';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { checkValidity } from '../../shared/Validity';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport ScrollToTopOnMount from '../../shared/ScrollToTopOnMount';\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Mail Address'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n    },\r\n    isSignup: true\r\n  };\r\n\r\n  inputChangedHandler = (e, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n\r\n      // update only one input\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: e.target.value,\r\n        valid: checkValidity(e.target.value, this.state.controls[controlName].validation),\r\n        touched: true\r\n      }\r\n    };\r\n\r\n    this.setState({\r\n      controls: updatedControls\r\n    });\r\n  };\r\n\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        isSignup: !prevState.isSignup\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { loading, error, isAuth } = this.props;\r\n    const { controls, isSignup } = this.state;\r\n\r\n    // convert object of objects into array of objects\r\n    const formElementsArray = [];\r\n    for (let key in controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: controls[key]\r\n      });\r\n    };\r\n\r\n    let form = formElementsArray.map(formElement => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(e) => this.inputChangedHandler(e, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    // Display Spinner\r\n    if (loading) {\r\n      form = <Spinner />\r\n    };\r\n\r\n    // Display Firebase Error Message\r\n    let errorMessage = null;\r\n    if (error) {\r\n      errorMessage = (\r\n        <p>{error.message}</p>\r\n      )\r\n    };\r\n\r\n    // redirect after signin/login\r\n    let authRedirect = null;\r\n    if (isAuth) {\r\n      authRedirect = <Redirect to=\"/\" />\r\n    };\r\n\r\n    let title = <h1 className=\"auth-title\">You don't have an account yet? Create them below.</h1>\r\n    if (!isSignup) title = <h1 className=\"auth-title\">Do you already have an account? Log in below.</h1>;\r\n\r\n    return (\r\n      <>\r\n        <ScrollToTopOnMount />\r\n        <div className=\"auth-container\">\r\n          {title}\r\n          <div className=\"switch\">\r\n            <Button\r\n              clicked={this.switchAuthModeHandler}\r\n              btnType=\"dark\">SWITCH TO {isSignup ? 'SINGIN' : 'SIGNUP'}</Button>\r\n          </div>\r\n          {authRedirect}\r\n          {errorMessage}\r\n          <form onSubmit={this.submitHandler}>\r\n            {form}\r\n            <Button>Submit</Button>\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nAuth.propTypes = {\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.object,\r\n  isAuth: PropTypes.bool.isRequired,\r\n  onAuth: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}